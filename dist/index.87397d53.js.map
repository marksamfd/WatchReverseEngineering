{"mappings":"AAAA,MAAMA,cAAgB,CAClBC,YAAa,cACbC,KAAM,QACNC,QAAS,iBAEPC,UACyCC,YAC/BC,GAERC,KAAKC,OAASF,EAcfG,WAEC,OAAKF,KAAMC,gBAYHE,eACKA,aAUhB,OAAAC,GAME,KAAAX,cAAAC,YAESM,KAAAK,iBAAaF,GACb,WACAV,cAAYE,KAEZK,KAACM,kBAAkBH,GACnB,MAEJ,KAAKV,cAAcG,QACfI,KAAAO,qBAAsBJ,UAiB1BC,GACJ,OAAOA,GACV,KAAAX,cAAAC,YAME,OAAAM,KAAAQ,SAEG,KAAGf,cAAWE,KACR,OAAOK,KAAKS,UAChB,KAAAhB,cAAMG,QACT,OAAAI,KAAAU,aAOD,OADAC,mBACQ,GAeRH,SACH,OAAA,GAAAR,KAAAC,OAAAW,OAAA,GAMEZ,KAAAC,OAAAY,QAAA,SAAAC,EAAAC,EAAAC,GAEG,OAAGF,GAAW,IAAAC,EAAAE,SAAA,KAAAC,QAAA,WAQnBb,iBAAAF,GAME,IAAAA,EAGF,YADGH,KAAOC,OAAW,IASlB,IAAKE,EAAQgB,WAAG,MAAA,MAAA,IAAAC,MAAA,gDACZN,EAAW,OACX,IAAAO,EAAM,EAAAA,EAAAlB,EAAAS,OAAAS,GAAA,EAAAP,EAAAQ,KAAAC,SAAApB,EAAAe,OAAAG,EAAA,GAAA,KACVrB,KAACC,OAAAa","sources":["valueClass.js"],"sourcesContent":["const ValueDataType = {\r\n    HEXADECIMAL: 'Hexadecimal',\r\n    UTF8: 'UTF-8',\r\n    DECIMAL: 'Decimal',\r\n};\r\nclass ValueConv {\r\n    /** @param {!Array<number>} initialValue */\r\n    constructor(initialValue) {\r\n        /** @private {!Array<number>} */\r\n        this.value_ = initialValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the backing array value.\r\n     * @return {!Array<number>}\r\n     */\r\n    getArray() {\r\n        return this.value_;\r\n    }\r\n\r\n    /**\r\n     * Sets the backing array value.\r\n     * @param {!Array<number>} newValue\r\n     */\r\n    setArray(newValue) {\r\n        this.value_ = newValue;\r\n    }\r\n\r\n    /**\r\n     * Sets the value by converting the |newValue| string using the formatting\r\n     * specified by |valueDataType|.\r\n     * @param {!ValueDataType} valueDataType\r\n     * @param {string} newValue\r\n     */\r\n    setAs(valueDataType, newValue) {\r\n        switch (valueDataType) {\r\n            case ValueDataType.HEXADECIMAL:\r\n                this.setValueFromHex_(newValue);\r\n                break;\r\n\r\n            case ValueDataType.UTF8:\r\n                this.setValueFromUTF8_(newValue);\r\n                break;\r\n\r\n            case ValueDataType.DECIMAL:\r\n                this.setValueFromDecimal_(newValue);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the value as a string representing the given |valueDataType|.\r\n     * @param {!ValueDataType} valueDataType\r\n     * @return {string}\r\n     */\r\n    getAs(valueDataType) {\r\n        switch (valueDataType) {\r\n            case ValueDataType.HEXADECIMAL:\r\n                return this.toHex_();\r\n\r\n            case ValueDataType.UTF8:\r\n                return this.toUTF8_();\r\n\r\n            case ValueDataType.DECIMAL:\r\n                return this.toDecimal_();\r\n        }\r\n        assertNotReached();\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Converts the value to a hex string.\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    toHex_() {\r\n        if (this.value_.length == 0) {\r\n            return '';\r\n        }\r\n\r\n        return this.value_.reduce(function (result, value, index) {\r\n            return result + ('0' + value.toString(16)).substr(-2);\r\n        }, '0x');\r\n    }\r\n\r\n    /**\r\n     * Sets the value from a hex string.\r\n     * @param {string} newValue\r\n     * @private\r\n     */\r\n    setValueFromHex_(newValue) {\r\n        if (!newValue) {\r\n            this.value_ = [];\r\n            return;\r\n        }\r\n\r\n        if (!newValue.startsWith('0x')) {\r\n            throw new Error('Expected new value to start with \"0x\".');\r\n        }\r\n\r\n        const result = [];\r\n        for (let i = 2; i < newValue.length; i += 2) {\r\n            result.push(parseInt(newValue.substr(i, 2), 16));\r\n        }\r\n\r\n        this.value_ = result;\r\n    }\r\n\r\n    /**\r\n     * Converts the value to a UTF-8 encoded text string.\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    toUTF8_() {\r\n        return this.value_.reduce(function (result, value) {\r\n            return result + String.fromCharCode(value);\r\n        }, '');\r\n    }\r\n\r\n    /**\r\n     * Sets the value from a UTF-8 encoded text string.\r\n     * @param {string} newValue\r\n     * @private\r\n     */\r\n    setValueFromUTF8_(newValue) {\r\n        if (!newValue) {\r\n            this.value_ = [];\r\n            return;\r\n        }\r\n\r\n        this.value_ = Array.from(newValue).map(function (char) {\r\n            return char.charCodeAt(0);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts the value to a decimal string with numbers delimited by '-'.\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    toDecimal_() {\r\n        return this.value_.join('-');\r\n    }\r\n\r\n    /**\r\n     * Sets the value from a decimal string delimited by '-'.\r\n     * @param {string} newValue\r\n     * @private\r\n     */\r\n    setValueFromDecimal_(newValue) {\r\n        if (!newValue) {\r\n            this.value_ = [];\r\n            return;\r\n        }\r\n\r\n        if (!/^[0-9\\-]*$/.test(newValue)) {\r\n            throw new Error('New value can only contain numbers and hyphens.');\r\n        }\r\n\r\n        this.value_ = newValue.split('-').map(function (val) {\r\n            return parseInt(val, 10);\r\n        });\r\n    }\r\n}"],"names":["ValueDataType","HEXADECIMAL","UTF8","DECIMAL","ValueConv","constructor","initialValue","this","value_","getArray","newValue","valueDataType","setValueFromHex_","setValueFromUTF8_","setValueFromDecimal_","toHex_","toUTF8_","toDecimal_","assertNotReached","length","reduce","result","value","index","toString","substr","startsWith","Error","i","push","parseInt"],"version":3,"file":"index.87397d53.js.map"}