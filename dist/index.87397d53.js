const ValueDataType={HEXADECIMAL:"Hexadecimal",UTF8:"UTF-8",DECIMAL:"Decimal"};class ValueConv{constructor(e){this.value_=e}getArray(){return this.value_}setArray(e){this.value_=e}setAs(e,t){switch(e){case ValueDataType.HEXADECIMAL:this.setValueFromHex_(t);break;case ValueDataType.UTF8:this.setValueFromUTF8_(t);break;case ValueDataType.DECIMAL:this.setValueFromDecimal_(t)}}getAs(e){switch(e){case ValueDataType.HEXADECIMAL:return this.toHex_();case ValueDataType.UTF8:return this.toUTF8_();case ValueDataType.DECIMAL:return this.toDecimal_()}return assertNotReached(),""}toHex_(){return 0==this.value_.length?"":this.value_.reduce((function(e,t,a){return e+("0"+t.toString(16)).substr(-2)}),"0x")}setValueFromHex_(e){if(!e)return void(this.value_=[]);if(!e.startsWith("0x"))throw new Error('Expected new value to start with "0x".');const t=[];for(let a=2;a<e.length;a+=2)t.push(parseInt(e.substr(a,2),16));this.value_=t}toUTF8_(){return this.value_.reduce((function(e,t){return e+String.fromCharCode(t)}),"")}setValueFromUTF8_(e){this.value_=e?Array.from(e).map((function(e){return e.charCodeAt(0)})):[]}toDecimal_(){return this.value_.join("-")}setValueFromDecimal_(e){if(e){if(!/^[0-9\-]*$/.test(e))throw new Error("New value can only contain numbers and hyphens.");this.value_=e.split("-").map((function(e){return parseInt(e,10)}))}else this.value_=[]}}
//# sourceMappingURL=index.87397d53.js.map
